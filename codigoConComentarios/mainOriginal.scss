/***
declaración de variables.
Las variables pueden ser declaradas en cualquier parte de la hoja de estilos, pero para mantener un orden y un fácil entendimiento, 
se declaran al principio.
Se declaran los 4 colores principales que tendrá la pagina.
También se declara el color que tendrá los textos.
Se crea una variable para la fuente a utilizar, obtenido de google fonts.
***/
$primary-color: #FFEFE7;
$secondary-color: #FFDAC6;
$tertiary-color: #BABD8D;
$quaternary-color:#FA9500;
$primary-text-color: #7C6A0A; /* Ejemplo de expresión de color hexadecimal. */
$font-stack: 'IBM Plex Sans', sans-serif; /* Ejemplo de expresión de string. */
$paragraph-size: 1.5em; /* Tamaño del texto. */

/*** Se declaran los mixins, por conveniencia de lectura para otros programadores, se hacen bajo la declaración de variables y antes 
de comenzar a crear las reglas de la hoja de estilos. ***/

/*** Se crea un mixin para asignar un display flex a los elementos en donde lo declare. Recibirá como argumentos la dirección 
(en filas, columnas), como estará justificado el contenido (centro, izquierda, derecha, espacio entre elementos) y como sera la 
alineación de los elementos. (centro, izquierda, derecha). ***/
@mixin flexCenter($direction, $content, $align) {
    display: flex;
    flex-direction: $direction;
	justify-content: $content;
	align-items: $align;
}

/*** Se crea un mixin para asignar los estilos de los botones ya que comparten similitud. ***/
@mixin buttonStyle {
    button {
        background: none;
        border-style: none;
    }
}

body {
    margin: 0; /* Ejemplo de expresión en números. */
    padding: 0;
    background-color: $primary-color;
    font-family: $font-stack;
}

nav {
    /* width: 100%; */
    /* height: 100px; */
    width: auto;
    /* display: flex; */
    /* justify-content: space-between; */
    /*** Cambio los estilos del display por los definidos en el mixin. ***/
    @include flexCenter(row, space-between, center);
    color: $primary-text-color;
    padding: 15px;

    /*** Aquí haremos uso de NESTING. ***/
    p {
        font-size: 1.5em;
        padding-left: 30px;
    }

    .icons {
        display: flex;
        /*** gap -> propiedad que se utiliza junto a flexbox para manejar el espacio de los elementos en el eje X y eje Y. ***/
        gap: 15px;

        // button {
        //     background: none;
        //     border-style: none;
        // }
        /*** Cambio los estilos del botón por los definidos en el mixin. ***/
        @include buttonStyle;
    }
}

article {
    /*** width: auto -> para que el ancho de la pagina se ajuste automáticamente. ***/
    width: auto;
    /* display: flex; */
    /* justify-content: space-between; */
    @include flexCenter(row, space-between, center);
    color: $primary-text-color;
    padding-top: 70px;
    padding-left: 45px;
    padding-right: 45px;

    .impact-section{
		/* display: flex; */
        /* flex-direction: column; */
        @include flexCenter(column, space-evenly, flex-start);
		padding-top: 50px;
		gap: 25px;
	}

    h1 {
        font-size: 3em;
        padding: 0;
        margin: 0;
    }

    p {
        font-size:$paragraph-size;
    }

    /*** Se llama al mixin de botón fuera de la regla del botón, para evitar solapar los estilos. ***/
    @include buttonStyle;
    button {
        width: 12vw;
        background-color: $quaternary-color;
		border-radius: 35px;
		color: white;
        font-size: 1em;
        padding: 20px;

        &:hover {
            transform: scale(1.1);
        }
    }

    img {
        width: 25vw;
        border-radius: 19px;
        padding: 60px;
    }
}

section {
    width: 100%;
    height: auto;

    h2 {
        color: $primary-text-color;
        font-size: 2em;
    }

    .healthcare {
        padding-bottom: 60px;

        h2 {
            font-weight: 300;
			padding-bottom: 60px;
        }

        .card-section{
			width: auto;
			height: auto;
            @include flexCenter(row, space-evenly, center);
           /*  display: flex; */
            /* justify-content: center; */
            /* align-items: center; */
            flex-wrap: wrap;
            column-gap: 200px;
			row-gap: 80px;
		}

        .product-card {
            width: 14vw;
            height: 45vh;
            background-color: $secondary-color;
            color: $primary-text-color;
            padding: 20px;
            border-radius: 8px;

            .icon {
                width: 100%;
				display: flex;
				justify-content: flex-end;
				padding-bottom: 12px;

                svg {
                    width: 28px;
                    height: 28px;
                }
            }

            .product-image {
                width: 100%;
                height: auto;
                display: flex;
                justify-content: center;
                align-items: center;

                img {
                    width: 12vw;
                    height: 30vh;
                    object-fit: cover;
                    border-radius: 6px;
                }
            }

        }
    }

    .furniture{
        /*** Utilizo la directiva @extend para HEREDAR todos los estilos dentro de la clase healthcare. Esta es la forma correcta de 
        reutilizar los estilos en vez de copiar y pegar lo mismo nuevamente y solo cambiar el los nombres de las clases, ya que estas 
        agregando el mismo código dos veces. ***/
		@extend .healthcare;

        /*** ahora puede cambiar el color de la card de productos para decoración del hogar, sin que genere un problema con el color 
        de las card de la sección anterior. ***/
		.product-card {
			background-color: $tertiary-color;
			color:white;
		}
	}
}

.about-us {
    padding-bottom: 60px;

    h2 {
        font-weight: bold;
        padding-bottom: 60px;
    }

    .mission-section {
		@include flexCenter(row, space-evenly, center);

        .earth {
			$text-color: #E86424;
			width: 30vw;
			display:flex;
			gap:40px;
			color: $text-color;

            img {
                /*** Object-fit -> propiedad CSS para definir que no se altere el aspect ratio de una imagen.
                contain: se utiliza para agregar una imagen con sus propiedades originales, muy util para imágenes sacadas de un Figma 
                        que ya vienen definidas en una medida exacta. 
                cover: se utiliza para cubrir todo el espacio asignado con la imagen. ***/
				object-fit: contain;
			}

            p {
				text-align: center;
				font-size: $paragraph-size;
			}
		
        }
	}

	.innovation{
        /*** Utilizo la herencia para heredar todos los estilos de earth. ***/
		@extend .earth;
	}

}

.gallery {

	h2 {
		font-weight: bold;
		padding-bottom: 60px;
	}

	.gallery-images {
		@include flexCenter(row, space-between ,center);

		img {
			width: 28vw;
			height: 45vh;
			object-fit: cover;
            /*** object-position -> se utiliza para mover la imagen que se encuentra dentro de una etiqueta, en este caso serian 5px 
            hacia la derecha y 35% para empujar la imagen hacia abajo. ***/
			object-position: 5px 35%;
			border-radius: 16px;

            &:hover {
                /*** transform -> propiedad CSS para transformar un elemento dentro de una etiqueta HTML.
                scale -> se utiliza para crear un zoom dentro de un elemento, en este caso, hace crecer la imagen 1.1 veces de su 
                tamaño original. ***/
                transform: scale(1.1);
            }
		}
	}
}

.location {
	$text-color: #E86424;
	color: $text-color;

    h2 {
		padding-bottom: 60px;
		padding-top: 60px;
	}

	.map {
		@include flexCenter(row, center ,center);
		padding-bottom: 50px;
	}

	h3, p {
		font-size: $paragraph-size;
	}
}

footer {
	background-color: $quaternary-color;
	width: auto;
	height: auto;
	padding: 40px;
	color:white;

    .social-media{
		@include flexCenter(row, center, center);
		gap: 40px;
		padding-bottom: 40px;
	}
}